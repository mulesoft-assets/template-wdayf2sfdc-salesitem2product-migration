<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Workday to Salesforce Sales Item to Product Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Workday admin I want to migrate Sales Items to Salesforce Products.

This template serves as a foundation for the process of migrating Sales items from Workday.

As implemented, this template leverages the Mule batch module.
The batch job is divided into *Process* and *On Complete* stages.

Migration process starts from querying all the existing Sales items at Workday.
In the *Process* stage, the template queries the Salesforce for already existing Products based on the Product Names retrieved from Workday.
The Products are inserted or updated in the Salesforce system based on the results of these queries. Afterwards, the Salesforce system is queried for Pricebook Entry, which belongs to the Product.
If Pricebook Entry was found, it is updated, otherwise the Pricebook Entry for the Product is created.

Finally during the *On Complete* stage the Template will both output statistics data into the console and send a notification email with the results of the batch execution.
	</section>
		<section id="considerations">

There are certain pre-requisites that must be considered to run this template. All of them deal with the preparations in both source and destination systems, that must be made for the template to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**

		</section>
		
		<section id="running_on_cloudhub">


Once your app is all set and started, supposing you choose as domain name `wdayfsalesitemsmigration` to trigger the use case you just need to browse to `http://wdayfsalesitemsmigration.cloudhub.io/migratesalesitems` and report will be sent to the emails configured.

		</section>
		<section id="running_on_standalone">

After this, to trigger the use case you just need to browse to the local HTTP connector with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/migratesalesitems` and this will output a summary report and send it in the e-mail.

		</section>
		<section id="application_configuration">
		
**Application Configuration**

+ http.port `9090` 

**Salesforce Connector Configuration**

+ sfdc.username `bob.dylan@orga`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.integration.pricebook2Id `standard_pricebook2_id`

**Workday Connector Configuration**

+ wday.user `wdayf_user`
+ wday.password `wdayf_password`
+ wday.tenant `wday_tenant`
+ wday.host `wday_host`

**SMTP Services Configuration**

+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `gmail_user`
+ smtp.password `gmail_password`

**Email Details**

+ mail.from `batch.migratesalesitems.migration%40mulesoft.com`
+ mail.to `username@gmail.com`
+ mail.subject `Batch Job Finished Report`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The template calls to the API can be calculated using the formula:
		
*** 4 * X  ***
		
Being ***X*** the number of Sales Items to be synchronized on each run.
 	
For instance if 10 records are fetched from origin instance, then 40 api calls will be made (4 * 10).

		</section>
		<section id="default_endpoints_xml">
		
This is the file where you will find the inbound side of your integration app.
This Template has only a HTTP Listener as the way to trigger the use case.

**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migratesalesitems` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `0.0.0.0`. CloudHub will then route requests from your application domain URL to the endpoint.
+ The endpoint is configured as a *request-response* by placing it in the source section of the flow. The response will be the total of Sales items synced and filtered by the criteria specified.

		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of executing the logic.
For the purpose of this particular Template the *mainFlow* just executes a batch job which handles all the migration logic.

		</section>
	</sections>
</configuration>